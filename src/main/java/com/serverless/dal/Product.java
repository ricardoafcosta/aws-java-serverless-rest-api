package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

/**
 * Product POJO that represents the Product entity and encapsulates all its functionality in a class.
 * The Product POJO class defines a data structure that matches the DynamoDB table schema and provides
 * helper methods for easy management of product data.
 */
@DynamoDBTable(tableName = "PLACEHOLDER_PRODUCTS_TABLE_NAME")
public class Product {

    // get the table name from the environment variables set in serverless.yml
    private static final String PRODUCTS_TABLE_NAME = System.getenv("PRODUCTS_TABLE_NAME");

    private static DynamoDBAdapter DB_ADAPTER;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger LOG = LoggerFactory.getLogger(Product.class);

    private String id;
    private String name;
    private Float price;

    public Product() {
        // The public constructor does a couple of things:
        // build the mapper config
        // Overrides the PLACEHOLDER_PRODUCTS_TABLE_NAME table name annotation value with the actual value from the environment variable
        // Gets an instance of DynamoDBAdapter
        // Gets an instance of AmazonDynamoDB client
        // Gets an instance of DynamoDBMapper
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PRODUCTS_TABLE_NAME))
                .build();
        // get the DB adapter
        this.DB_ADAPTER = DynamoDBAdapter.getInstance();
        this.client = this.DB_ADAPTER.getDbClient();
        // create the mapper with config
        this.mapper = this.DB_ADAPTER.createDbMapper(mapperConfig);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable(PRODUCTS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    /**
     * Uses a DynamoDBScanExpression construct to retrieve all the products from the products table.
     *
     * @return a list of products via the List<Product> data structure. It also logs the list of products retrieved.
     * @throws IOException IOException
     */
    public List<Product> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Product> results = this.mapper.scan(Product.class, scanExp);
        for (Product p : results) {
            LOG.info("Products - list(): " + p.toString());
        }
        return results;
    }

    /**
     * Takes a product id and uses a DynamoDBQueryExpression to set up a query expression to match the passed in product id.
     * The mapper object has a query method that is passed the queryExp, to retrieve the matching product
     *
     * @param id product id
     * @return the product
     * @throws IOException IOException
     */
    public Product get(String id) throws IOException {
        Product product = null;

        HashMap<String, AttributeValue> av = new HashMap<>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Product> queryExp = new DynamoDBQueryExpression<Product>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Product> result = this.mapper.query(Product.class, queryExp);
        if (result.size() > 0) {
            product = result.get(0);
            LOG.info("Products - get(): product - " + product.toString());
        } else {
            LOG.info("Products - get(): product - Not Found.");
        }
        return product;
    }

    /**
     * Takes a product instance populated with values, and passes it to the mapper object's save method,
     * to save the product to the underlying table
     *
     * @param product the product
     * @throws IOException IOException
     */
    public void save(Product product) throws IOException {
        LOG.info("Products - save(): " + product.toString());
        this.mapper.save(product);
    }

    /**
     * Takes a product id and then calls the get() method to first validate if a product with a matching id exists.
     * If it exists, it calls the mapper object's delete method, to delete the product from the underlying table
     * @param id the product id
     * @return boolean with the result of operation
     * @throws IOException IOException
     */
    public Boolean delete(String id) throws IOException {
        Product product = null;

        // get product if exists
        product = get(id);
        if (product != null) {
            LOG.info("Products - delete(): " + product.toString());
            this.mapper.delete(product);
        } else {
            LOG.info("Products - delete(): product - does not exist.");
            return false;
        }
        return true;
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "price")
    public Float getPrice() {
        return price;
    }

    public void setPrice(Float price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return "Product{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", price=" + price +
                '}';
    }
}
